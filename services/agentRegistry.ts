import { AgentDefinition } from '../types';

export interface AgentProfile {
    name: string;
    agents: AgentDefinition[];
    version: number;
}

const STORAGE_KEY = 'sirion.agent.profile.v1';

export function loadProfile(): AgentProfile {
    const raw = typeof localStorage !== 'undefined' ? localStorage.getItem(STORAGE_KEY) : null;
    if (!raw) return defaultProfile();
    try {
        const parsed = JSON.parse(raw) as AgentProfile;
        if (!parsed || !Array.isArray(parsed.agents)) return defaultProfile();
        return parsed;
    } catch {
        return defaultProfile();
    }
}

export function saveProfile(profile: AgentProfile) {
    if (typeof localStorage === 'undefined') return;
    localStorage.setItem(STORAGE_KEY, JSON.stringify(profile));
}

export function defaultProfile(): AgentProfile {
    return {
        name: 'Default',
        version: 1,
        agents: seedDefaultAgents(),
    };
}

function seedDefaultAgents(): AgentDefinition[] {
    return [
        { id: 'talk_to_corpus', name: 'AskSirion Corpus (Talk-to-Corpus)', description: 'Corpus-level conversational search with drill-down to documents; yields synthesized answers, tables, and citations.', whenToUse: 'When the user asks broad corpus-level questions or analytics across many documents.', type: 'mock', enabled: true, icon: 'talk_to_corpus', mockBehavior: 'Return {answer:"<synthesized>" , tables:[{title:"Top Clauses", rows:[...]}], citations:[{doc:"<name>", section:"<id>"}]}.' },
        { id: 'talk_to_document', name: 'Talk-to-Document', description: 'Single-document conversational Q&A with clause-level citations and short memory.', whenToUse: 'When a user asks questions about the contents of a single uploaded/selected document.', type: 'mock', enabled: true, icon: 'talk_to_document', mockBehavior: 'Return {answer:"<short>" , citations:[{doc:"<name>", clause:"<#>"}], memory:{followups:["<q1>"]}}.' },
        { id: 'obligation_frequency_setup_recommender', name: 'Obligation Recommender', description: 'Structures recurring obligation schedules.', whenToUse: 'When deriving recurring obligation schedules from clause text.', type: 'mock', enabled: true, icon: 'obligation_frequency_setup_recommender' },
        { id: 'service_level_fulfillment_agent', name: 'SLA Fulfillment Agent', description: 'Evaluates if SLA commitments are met.', whenToUse: 'When checking SLA compliance across documents.', type: 'mock', enabled: true, icon: 'service_level_fulfillment_agent' },
        { id: 'template_harmonization', name: 'Template Harmonization', description: 'Creates standardized templates from multiple agreements.', whenToUse: 'When homogenizing multiple contract templates.', type: 'mock', enabled: true, icon: 'template_harmonization' },
        { id: 'convo_create', name: 'ConvoCreate', description: 'Guides users through interactive contract drafting.', whenToUse: 'When assisting interactive drafting.', type: 'mock', enabled: true, icon: 'convo_create' },
        { id: 'cross_reference_check', name: 'Cross-Reference Check', description: 'Detects and fixes broken clause references.', whenToUse: 'When validating cross-references.', type: 'mock', enabled: true, icon: 'cross_reference_check' },
        { id: 'numbering_check', name: 'Numbering Check', description: 'Validates and auto-fixes document numbering.', whenToUse: 'When validating numbering consistency.', type: 'mock', enabled: true, icon: 'numbering_check' },
        { id: 'definitions_check', name: 'Definitions Check', description: 'Flags undefined or inconsistent defined terms.', whenToUse: 'When checking defined term usage.', type: 'mock', enabled: true, icon: 'definitions_check' },
        { id: 'teams_integration', name: 'Teams Integration', description: 'Connects with MS Teams for updates and workflows. This is for ONE-WAY notifications only; it cannot receive replies.', whenToUse: 'When sending one-way notifications to MS Teams.', type: 'mock', enabled: true, icon: 'teams_integration' },
        { id: 'ask_tim', name: 'AskTim', description: 'Legal research assistant for interpretation and guidance.', whenToUse: 'When asking for legal interpretation.', type: 'mock', enabled: true, icon: 'ask_tim' },
        { id: 'playbook_generator_builder', name: 'Playbook Builder', description: 'Builds redlining playbooks from past contracts.', whenToUse: 'When generating playbooks.', type: 'mock', enabled: true, icon: 'playbook_generator_builder' },
        { id: 'supplier_onboarding_copilot', name: 'Supplier Onboarding Copilot', description: 'Automates supplier onboarding workflows.', whenToUse: 'When orchestrating onboarding workflows.', type: 'mock', enabled: true, icon: 'supplier_onboarding_copilot' },
        { id: 'human_assistant', name: 'Human Assistant', description: 'Asks the user for clarification.', whenToUse: 'Mandatory when request is ambiguous or needs human input.', type: 'mock', enabled: true, icon: 'human_assistant', system: true },
        { id: 'branch_orchestrator', name: 'Branch Orchestrator', description: 'Pauses execution to decide on the next steps based on data.', whenToUse: 'End of Phase 1 for conditional plans.', type: 'mock', enabled: true, icon: 'branch_orchestrator', system: true },
        { id: 'family_of_contracts_orchestrator', name: 'Family of Contracts Orchestrator', description: 'One-shot agent that, given uploaded contract documents (and optionally an Excel reference), extracts per-document attributes and produces immediate Parent→Child mappings to construct contract families.', whenToUse: 'When the user asks to identify/construct contract families or parent–child relationships across a set of documents.', type: 'mock', enabled: true, icon: 'family_of_contracts_orchestrator', mockBehavior: 'You are a team-style agent that performs two phases: (1) Document attribute extraction; (2) Parent–Child (PC) mapping.\n\nINPUTS: You will be given a list of documents, each with a document_name and (optionally) text/content. You may also be given an optional Excel-like reference (rows with fields such as child_name, parent_hint, and/or free-text reference lines).\n\nPHASE 1 — DOCUMENT EXTRACTION (Document Extraction Agent 2.0): For each input document, extract the following attributes with high recall and precise normalization: \n  - title: The document title.\n  - parties: Both parties to the agreement.\n  - effective_date: The effective date. Normalize to ISO-8601 if possible (YYYY-MM-DD).\n  - agreement_type: One of ["Master Services Agreement", "Amendment", "SOW", "Work Order", "Order Form", "Change Order", "Annexure", "Appendix", "Schedule", "Exhibit", "Other"].\n  - signed: Boolean true/false (or null if indeterminate).\n  - document_type: "main" for root agreements (e.g., MSA/VPA/etc.); "supporting" for annexures/appendices/definitions/schedules/exhibits/etc.\n  - references: FULL citation to the agreement explicitly referenced in the doc text, if any. Example: for a sentence like "this amendment to VPA between Party1 and Party2 dated 1 Sept", return exactly: "VPA between Party1 and Party2 dated 1 Sept". If no explicit reference, return null.\n\nProduce an attributes table whose FIRST column is EXACTLY the uploaded document name (string match) and subsequent columns are the fields above.\n\nPHASE 2 — PC MAPPING (PC Mapping Agent): Using the attributes table and any provided Excel-like reference: \n  1) Build immediate Parent→Child pairs restricted to the SAME FAMILY. Families are rooted by Level 1 main agreements; a family can have up to 2 distinct Level 1 roots.\n  2) Emit only immediate links. Example: If Change Order → Work Order → MSA, you MUST output two rows: ("MSA", "Work Order") and ("Work Order", "Change Order").\n  3) Names in both columns MUST be EXACT names from the uploaded set. No inferred renaming.\n\nDISAMBIGUATION RULES: \n  - Prefer explicit textual references (from the \'references\' field).\n  - Use parties + effective_date + agreement_type to disambiguate similarly-named docs.\n  - If ties remain, consult the Excel reference hints.\n  - If still ambiguous, do not fabricate links; omit that pair and include a warning in \'notes\'.\n\nMOCK/NO-FILE SCENARIO: If no input documents or references are provided (mock or test run), you must still return a valid JSON object conforming to the schema below. In this case, fabricate 2–3 plausible contract entries with realistic attributes and parent–child pairs (e.g., an MSA with one SOW and an Amendment). These should still obey the schema exactly. Do not return an empty output.\n\nOUTPUT FORMAT (JSON): Return a single JSON object with two top-level fields: \n  {\n    "attributesTable": {\n      "columns": ["document_name", "title", "parties", "effective_date", "agreement_type", "signed", "document_type", "references"],\n      "rows": [\n        ["<exact_doc_name_1>", "<title>", ["<partyA>", "<partyB>"], "<YYYY-MM-DD|null>", "<agreement_type>", <true|false|null>, "<main|supporting>", "<full_reference|null>"],\n        ["<exact_doc_name_2>", ...]\n      ]\n    },\n    "parentChildPairs": [\n      {"parent_document_name": "<exact_parent_doc_name>", "child_document_name": "<exact_child_doc_name>"},\n      {"parent_document_name": "<...>", "child_document_name": "<...>"}\n    ],\n    "notes": ["<optional warnings or unresolved ambiguities>"]\n  }\n\nVALIDATION: \n  - Every parent/child name MUST appear in attributesTable.rows[*][0].\n  - No self-links; no duplicates.\n  - Only immediate links (no transitive closures).\n  - Keep families separated implicitly (no cross-family edges).\n\nSTYLE: Be terse and deterministic; return only the JSON object described above without extra prose.' },
        { id: 'ae_workbench_extractor', name: 'AE Workbench Extractor', description: 'Bulk extraction/ops on large drops of contracts. Normalizes entities and metadata and emits batch receipts.', whenToUse: 'When ingesting large batches for extraction/ops across many contracts.', type: 'mock', enabled: true, icon: 'ae_workbench_extractor', mockBehavior: 'Return a JSON object with keys: {batches:[{batch_id, count, started_at, finished_at}], documents:[{name, detected_type, parties:[A,B], effective_date, signed, errors:[]}]}.' },
        { id: 'auto_tagging_ocr', name: 'Auto-Tagging & OCR', description: 'Runs OCR on scanned PDFs/images and auto-tags clauses/sections for retrieval.', whenToUse: 'When uploaded documents need OCR and semantic tagging on ingest.', type: 'mock', enabled: true, icon: 'auto_tagging_ocr', mockBehavior: 'Return a list of items: [{document_name, ocr_text_excerpt, tags:["confidentiality","signature_block"], converted:".docx"}].' },
        { id: 'repository_ops', name: 'Repository Ops', description: 'Organize/download/replace/delete documents; manage folder trees and export bundles.', whenToUse: 'When performing repository operations (moves, renames, versioning, exports).', type: 'mock', enabled: true, icon: 'repository_ops', mockBehavior: 'Return an ops receipt: {operations:[{op:"move", from:"/old", to:"/new", status:"succeeded"}], zip_export:"/mock/path/export.zip"}.' },
        { id: 'novation_reparenting', name: 'Novation & Re-parenting', description: 'Reassign contracts to a new supplier or re-parent under a new governing agreement with audit trail.', whenToUse: 'When moving a contract to a new supplier or different parent node.', type: 'mock', enabled: true, icon: 'novation_reparenting', mockBehavior: 'Return {reassignments:[{contract_id, from_supplier, to_supplier, from_parent, to_parent, note}], audit_id:"NOV-MOCK-001"}.' },
        { id: 'multi_supplier_contract_manager', name: 'Multi-Supplier Contract Manager', description: 'Manage framework/multi-party agreements with supplier-specific visibility and term controls.', whenToUse: 'When linking multiple suppliers to a single governing agreement with scoped visibility.', type: 'mock', enabled: true, icon: 'multi_supplier_contract_manager', mockBehavior: 'Return {agreement:"<name>", suppliers:[{name, visibility:"full|limited", locked_sections:["pricing","sla"]}]}.' },
        { id: 'advanced_search', name: 'Advanced Search (Faceted+NL)', description: 'Faceted retrieval combined with natural-language hints over large repositories.', whenToUse: 'When the user needs ranked search results across corpus with filters.', type: 'mock', enabled: true, icon: 'advanced_search', mockBehavior: 'Return {query:"...", filters:{...}, results:[{title, path, score, snippet}], saved_view_id:"SV-123"}.' },
        { id: 'clause_library_manager', name: 'Clause Library Manager', description: 'Create/approve/publish clauses and definitions with versions and metadata.', whenToUse: 'When managing clause objects or definitions for reuse in templates/drafts.', type: 'mock', enabled: true, icon: 'clause_library_manager', mockBehavior: 'Return {clauses:[{id, title, version, status:"approved|draft", tags:[...] }]}.' },
        { id: 'template_manager', name: 'Template Manager', description: 'Build/edit templates and enforce structures, linking clauses, definitions, tags, and configuration logic.', whenToUse: 'When users create or modify contract templates or need structural enforcement.', type: 'mock', enabled: true, icon: 'template_manager', mockBehavior: 'Return {template:{name:"<mock>", version:"1.0", components:["clauses","definitions","tags"], validations:[{rule:"sequence", status:"pass"}]}}.' },
        { id: 'clause_assembly', name: 'Clause Assembly', description: 'Questionnaire-driven first-draft assembly using selected clauses and playbook defaults.', whenToUse: 'When assembling a new draft from Q&A inputs and a chosen agreement type.', type: 'mock', enabled: true, icon: 'clause_assembly', mockBehavior: 'Return {questionnaire:[{q:"Governing law?", a:"NY"}], draft:{sections:[{title:"Term", text:"..."}]}}.' },
        { id: 'clause_assembly_validator', name: 'Clause Assembly Validator (Add-in)', description: 'Validates assembly outputs against CDR metadata and rules. Avoids over-inserting CDRs.', whenToUse: 'When verifying an assembled draft for compliance with template/CDR rules.', type: 'mock', enabled: true, icon: 'clause_assembly_validator', mockBehavior: 'Return {validation:[{rule:"no-duplicate-definitions", status:"pass"},{rule:"mandatory-clauses-present", status:"warn", missing:["Limitation of Liability"]}] }.' },
        { id: 'office_addins_agent', name: 'Word/Outlook Add-ins Agent', description: 'In-Office authoring and collaboration: upload, tagging, metadata edits, and sync back to repository.', whenToUse: 'When users work in Microsoft Word/Outlook and want in-place actions synced to the platform.', type: 'mock', enabled: true, icon: 'office_addins_agent', mockBehavior: 'Return {app:"Word", actions:[{type:"upload", status:"succeeded"},{type:"apply-tag", tag:"Confidential"}], version:"v2"}.' },
        { id: 'knowsirion_help', name: 'KnowSirion (Product Help)', description: 'In-product help/manual Q&A, access-aware by role and feature entitlements.', whenToUse: 'When a user asks how to use features or requests product help.', type: 'mock', enabled: true, icon: 'knowsirion_help', mockBehavior: 'Return {question:"<user_q>", answer:"<scoped_help>", links:[{title:"<guide>", href:"/help/<id>"}], guardrails:{access:"role-scoped"}}.' },
        { id: 'byok_security', name: 'BYOK Security', description: 'Encrypt/decrypt sensitive fields and documents with customer-managed keys; mask/unmask for non-key holders with full audit.', whenToUse: 'When enforcing customer-managed encryption, masking data for non-key holders, or producing encryption audit trails.', type: 'mock', enabled: true, icon: 'byok_security', mockBehavior: 'Return {operation:"encrypt|decrypt|mask|unmask", scope:["field:pii.email","doc:contract.pdf"], key_ref:"kms://mock-key", audit_id:"AUD-001"}.' },
        { id: 'workflow_2_designer', name: 'Workflow 2.0 Designer', description: 'Define/modify CLM workflows; create states, transitions, rules; produce a runnable workflow spec and migration plan.', whenToUse: 'When authoring or migrating workflow definitions for CLM processes.', type: 'mock', enabled: true, icon: 'workflow_2_designer', mockBehavior: 'Return {workflow:{name:"Mock-Workflow", states:["Draft","Legal","Signed"], transitions:[{"from":"Draft","to":"Legal"}]}, migration:{from:"v1", to:"v2", changes:["+state:Legal"]}}.' },
        { id: 'integration_hub_sis', name: 'Integration Hub (SIS)', description: 'Automate data flows, connect ERP/CRM/storage, and orchestrate sync jobs with monitoring and error handling.', whenToUse: 'When configuring or executing integrations between the platform and external systems.', type: 'mock', enabled: true, icon: 'integration_hub_sis', mockBehavior: 'Return {job:"sync-contracts", connectors:["Salesforce","SAP"], runs:[{run_id:"RUN-101", status:"succeeded"}], errors:[]}.' },
        { id: 'connector_agents_bundle', name: 'Connector Agents (bundle)', description: 'Packaged connectors: Salesforce, Oracle ERP, SAP S/4HANA, SAP Ariba (Award/Bid), Dynamics 365, Box, RSA Archer, SCIM (Azure/Okta). Create/sync CDRs, suppliers, line items; PR/PO loops; identity sync.', whenToUse: 'When creating or synchronizing records across external systems or syncing identities and permissions.', type: 'mock', enabled: true, icon: 'connector_agents_bundle', mockBehavior: 'Return {connector:"Salesforce", ops:[{op:"upsert", object:"Contract__c", count:5}], cross_ids:[{"local":"CDR-001","remote":"SF-123"}], errors:[]}.' },
        { id: 'obligation_management', name: 'Obligation Management', description: 'Capture, track, and automate obligations; link to money and schedules.', whenToUse: 'When obligations need to be extracted, tracked, automated, and linked to monetary or operational events.', type: 'mock', enabled: true, icon: 'obligation_management', mockBehavior: 'Return {calendarized_tasks:[...], risks:[{obligation:"notice", severity:"high"}]}.' },
        { id: 'service_level_management', name: 'Service Level Management', description: 'Ingest ITSM/operational data, validate against SLA targets, compute credits/earnbacks.', whenToUse: 'When SLAs and operational metrics must be validated and service credits or earnbacks computed.', type: 'mock', enabled: true, icon: 'service_level_management', mockBehavior: 'Return {kpis:[{name:"uptime", target:"99.9%", actual:"99.7%", status:"fail"}], credits:{amount:1200,currency:"USD"}}.' },
        { id: 'invoice_reconciliation', name: 'Invoice Reconciliation', description: '2-/3-/4-way match vs services/price books/POs; raise variances and approvals.', whenToUse: 'When invoices must be reconciled against contractual and operational records and routed for approval.', type: 'mock', enabled: true, icon: 'invoice_reconciliation', mockBehavior: 'Return {matches:[{invoice:"INV-1", po:"PO-9", status:"partial"}], variances:[{type:"price", amount:300}], approvals:[{owner:"AP", status:"pending"}]}.' },
        { id: 'governance_body', name: 'Governance Body', description: 'Schedule forums, log minutes, track actions/issues/change requests and escalations.', whenToUse: 'When governance forums and actions/issues/escalations need to be run and tracked.', type: 'mock', enabled: true, icon: 'governance_body', mockBehavior: 'Return {meeting:{id:"GOV-100", minutes:"..."}, actions:[{owner:"Legal",due:"2025-09-01"}], escalations:[{id:"ESC-5"}]}.' },
        { id: 'collaboration_management', name: 'Collaboration Management', description: 'Track actions, issues, disputes end-to-end with SLAs.', whenToUse: 'When cross-team collaboration items (actions/issues/disputes) need lifecycle tracking through resolution.', type: 'mock', enabled: true, icon: 'collaboration_management', mockBehavior: 'Return {tickets:[{id:"T-10",state:"open"},{id:"T-11",state:"resolved"}], slas:[{name:"response-time", status:"met"}]}.' },
        { id: 'issue_identification', name: 'Issue Identification', description: 'Scan drafts against playbooks and highlight prioritized risks with clause citations.', whenToUse: 'When a user wants risks/issues identified in a draft relative to a playbook or baseline.', type: 'mock', enabled: true, icon: 'issue_identification', mockBehavior: 'Return {issues:[{clause:"Limitation of Liability", severity:"high", cite:"§10.3"}], summary:{high:1, medium:2, low:0}}.' },
        { id: 'clause_deviation', name: 'Clause Deviation (CD 2.0)', description: 'Compute grouped deviations (adds, deletes, modifications) between counterparty draft and baseline.', whenToUse: 'When the goal is to quantify and categorize deviations clause-by-clause.', type: 'mock', enabled: true, icon: 'clause_deviation', mockBehavior: 'Return {adds:["New audit clause"], deletes:["Warranty cap"], mods:[{clause:"Indemnity", delta:"narrowed"}], metrics:{adds:1,deletes:1,mods:1}}.' },
        { id: 'ai_redlining', name: 'AI Redlining', description: 'Apply playbook-driven edits with rationales, ready for HITL accept/reject.', whenToUse: 'When auto-suggesting redlines to a draft using a specified playbook.', type: 'mock', enabled: true, icon: 'ai_redlining', mockBehavior: 'Return {suggestions:[{section:"Indemnity", change:"replace", text:"...", rationale:"Align to fallback"}], review:{accept:1,reject:0,pending:2}}.' },
        { id: 'share_with_counterparty', name: 'Share with Counterparty', description: 'Secure external sharing for negotiation with role-scoped access and status sync.', whenToUse: 'When a draft must be shared with counterparties for negotiation with auditing.', type: 'mock', enabled: true, icon: 'share_with_counterparty', mockBehavior: 'Return {share_id:"SH-001", participants:[{email:"cp@example.com", role:"viewer"}], audit:[{event:"granted", at:"2025-08-20T12:00:00Z"}]}.' },
        { id: 'esignature_orchestrator', name: 'E-Signature Orchestrator', description: 'Package final docs, clean artifacts, and send for e-signature via selected provider; return envelope status.', whenToUse: 'When sending finalized documents for signature and tracking envelope status.', type: 'mock', enabled: true, icon: 'esignature_orchestrator', mockBehavior: 'Return {envelope:"ENV-123", provider:"DocuSign", status:"sent", recipients:["signer@buyer.com","signer@seller.com"]}.' },
    ];
}


